name: Security

on:
  push:
    branches:
      - main
    paths:
      - projects/security
      - .github/workflows/security.yml

jobs:
  test38:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: Load cached venv
        id: cached-dependencies
        uses: actions/cache@v2
        with:
          path: projects/security/.tox
          key: tox-${{ runner.os }}-security-py38
      - name: Test with tox
        run: tox -c projects/security -e py38
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: Load cached venv
        id: cached-dependencies
        uses: actions/cache@v2
        with:
          path: projects/security/.tox
          key: tox-${{ runner.os }}-security-linting
      - name: Test with tox
        run: tox -c projects/security -e mypy,pretty,flake8,pylint
#    steps:
#      #----------------------------------------------
#      #       check-out repo and set-up python
#      #----------------------------------------------
#      - name: Checkout
#        uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#      #----------------------------------------------
#      #       install and configure poetry
#      #----------------------------------------------
#      - name: Install Poetry
#        uses: snok/install-poetry@v1.1.1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      #----------------------------------------------
#      #       load cached venv if cache exists
#      #----------------------------------------------
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
#      #----------------------------------------------
#      # install dependencies if cache does not exist
#      #----------------------------------------------
#      - name: Install dependencies
#        run: poetry install
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      #----------------------------------------------
#      #              run test suite
#      #----------------------------------------------
#      - name: Run Tests
#        run: poetry run pytest && poetry run codecov
#        env:
#          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      #----------------------------------------------
#      #       check-out repo and set-up python
#      #----------------------------------------------
#      - name: Checkout
#        uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#      #----------------------------------------------
#      #       install and configure poetry
#      #----------------------------------------------
#      - name: Install Poetry
#        uses: snok/install-poetry@v1.1.1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      #----------------------------------------------
#      #       load cached venv if cache exists
#      #----------------------------------------------
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
#      #----------------------------------------------
#      # install dependencies if cache does not exist
#      #----------------------------------------------
#      - name: Install dependencies
#        run: poetry install
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      #----------------------------------------------
#      #                run linters
#      #----------------------------------------------
#      - name: Black
#        run: poetry run black . --check
#      - name: mypy
#        run: poetry run mypy
#      - name: flake 8
#        run: poetry run flake8 . --count --statistics
#      - name: isort
#        run: poetry run isort . --check
#
#  publish:
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
#    needs:
#      - test
#      - lint
#    runs-on: ubuntu-latest
#    steps:
#      #----------------------------------------------
#      #       check-out repo and set-up python
#      #----------------------------------------------
#      - name: Checkout
#        uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#      #----------------------------------------------
#      #       install and configure poetry
#      #----------------------------------------------
#      - name: Install Poetry
#        uses: snok/install-poetry@v1.1.1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      #----------------------------------------------
#      #       Publish Library
#      #----------------------------------------------
#      - run: |
#          poetry build
#          poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
